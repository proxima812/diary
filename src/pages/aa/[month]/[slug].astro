---
import { books } from "@/data/data"
import { aa } from "@/data/reflections/aa"
import Layout from "@/layouts/Layout.astro"
import { Icon } from "astro-icon/components"
import { marked } from "marked"

export async function getStaticPaths() {
	const paths = []

	for (const [month, posts] of Object.entries(aa)) {
		for (const [slug] of Object.entries(posts)) {
			paths.push({ params: { month, slug } })
		}
	}

	return paths
}

const { slug, month } = Astro.params

const monthPosts = aa[month]
const entry = monthPosts?.[slug]
const dayKey = entry ? Object.keys(entry)[0] : null
const postData = dayKey ? entry[dayKey] : null
---

<Layout
	title={`–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ê–ê - ${postData.title}`}
	description={"–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –ê–ê –ø–æ –∫–Ω–∏–≥–∞–º: " + books.join(", ")}
>
	<main class="flex flex-col gap-12 mx-auto max-w-4xl">
		<button
			id="copyButton"
			class="bg-gradient-to-tr from-blue-500 to-sky-500 self-end max-w-fit cursor-pointer text-white rounded-md shadow-2xs shadow-blue-100 p-2"
		>
			<svg
				width="18"
				height="18"
				viewBox="0 0 18 18"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					d="M11.43 1.5H8.5095C7.1865 1.5 6.138 1.5 5.31825 1.611C4.47375 1.725 3.7905 1.965 3.252 2.50575C2.71275 3.0465 2.4735 3.73275 2.36025 4.58025C2.25 5.40375 2.25 6.456 2.25 7.78425V12.1627C2.25 13.2937 2.94 14.2628 3.92025 14.6693C3.87 13.9867 3.87 13.0305 3.87 12.234V8.4765C3.87 7.51575 3.87 6.687 3.9585 6.024C4.05375 5.313 4.26825 4.632 4.81875 4.07925C5.36925 3.5265 6.048 3.31125 6.756 3.21525C7.416 3.12675 8.241 3.12675 9.19875 3.12675H11.5013C12.4583 3.12675 13.2818 3.12675 13.9425 3.21525C13.7446 2.70997 13.399 2.27605 12.9508 1.97009C12.5026 1.66412 11.9727 1.5003 11.43 1.5Z"
					fill="white"></path>
				<path
					d="M4.94922 8.5477C4.94922 6.5032 4.94922 5.48095 5.58222 4.8457C6.21447 4.21045 7.23222 4.21045 9.26922 4.21045H11.4292C13.4655 4.21045 14.484 4.21045 15.117 4.8457C15.75 5.48095 15.7492 6.5032 15.7492 8.5477V12.1627C15.7492 14.2072 15.7492 15.2294 15.117 15.8647C14.484 16.4999 13.4655 16.4999 11.4292 16.4999H9.26922C7.23297 16.4999 6.21447 16.4999 5.58222 15.8647C4.94922 15.2294 4.94922 14.2072 4.94922 12.1627V8.5477Z"
					fill="white"></path>
			</svg>
		</button>

		<div
			class="rounded-2xl md:mx-0 -mx-5 shadow-[inset_0_0_2px_1px_#ffffff4d] ring-1 ring-black/5"
		>
			<div class="rounded-2xl p-2 shadow-md shadow-black/5">
				<div
					class="rounded-xl shadow-lg ring-1 ring-black/5 grid grid-cols-1 gap-3 lg:shadow-2xl bg-white p-6 md:p-14"
				>
					<div class="mb-8">
						<h1 class="mb-4 text-[#070738] text-4xl lg:text-6xl font-bold">
							{postData.title}
						</h1>
						<p class="text-blue-900 md:text-base text-sm flex items-center gap-1">
							<span id="postDesc">{postData.desc}</span>
						</p>
					</div>

					<article
						id="postContent"
						class={`prose max-w-none prose-heading:text-balance prose-zinc prose-lg xl:prose-xl `}
						set:html={marked(postData.content)}
					/>
				</div>
			</div>
		</div>
	</main>

	<script is:inline>
		document.addEventListener("DOMContentLoaded", () => {
			const button = document.getElementById("copyButton")
			const desc = document.getElementById("postDesc")
			const article = document.getElementById("postContent")

			const originalSvg = button.innerHTML

			const successSvg = `
			<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="white" viewBox="0 0 24 24">
				<path d="M20.285 2l-11.285 11.567-5.285-5.285-3.715 3.718 9 9 15-15.285z"/>
			</svg>`

			button.addEventListener("click", () => {
				if (!article || !desc) return

				const elements = article.querySelectorAll("h1, h2, h3, p")

				const articleText = Array.from(elements)
					.map(el => el.textContent.trim())
					.join("\n\n")

				const fullText = `üåá ${desc.textContent.trim()}\n\n${articleText}`

				navigator.clipboard
					.writeText(fullText)
					.then(() => {
						button.innerHTML = successSvg
						setTimeout(() => {
							button.innerHTML = originalSvg
						}, 2000)
					})
					.catch(err => {
						console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", err)
						button.textContent = "–û—à–∏–±–∫–∞ ‚ùå"
					})
			})
		})
	</script>
</Layout>
